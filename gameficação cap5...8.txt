1) Qual o objetivo da formatação? 
	a) Servir como forma de se comunicar com outros programadores (verdadeiro
	b) Aumentar o desempenho do código
	c) Substituir a necessidade de comentários no código
	d) Garantir que o código seja executado corretamente independentemente da lógica

2) Por que é importante que uma equipe de desenvolvedores adote um único estilo de formatação?
	a) Porque estilos variados tornam o código mais moderno e visualmente interessante
	b) Porque um estilo único ajuda a manter a consistência e facilita a leitura do código 	(verdadeira)
	c) Porque isso evita que o código precise ser compilado novamente
	d) Porque cada desenvolvedor pode entender melhor se usar seu próprio estilo

3) Qual é o principal objetivo da abstração de dados em programação orientada a objetos?
	a) Permitir o acesso direto às variáveis da classe para facilitar o uso
	b) Esconder completamente os dados, impedindo qualquer tipo de acesso
	c) Expor interfaces abstratas que permitem manipular os dados sem conhecer sua implementação 	(verdadeira)
	d) Substituir a necessidade de métodos na classe por variáveis públicas
	
4) O que a Lei de Demeter recomenda na programação orientada a objetos?
	a) Que os objetos utilizem métodos acessores para expor sua estrutura interna
	b) Que os módulos tenham total acesso às propriedades internas de outros objetos
	c) Que os objetos manipulem diretamente os atributos de outros objetos para ganhar desempenho
	d) Que um módulo não conheça a estrutura interna dos objetos que manipula, interagindo apenas 	com interfaces expostas (verdadeira)
	
5) O que caracteriza um "Train Wreck" no contexto da programação orientada a objetos?
	a) O uso de variáveis globais para compartilhar dados entre diferentes classes
	b) A criação de métodos muito longos com centenas de linhas de código
	c) A repetição excessiva de código semelhante em diferentes partes do sistema
	d) O encadeamento excessivo de chamadas de métodos ou acessos a propriedades em uma única linha, 	gerando acoplamento e dificultando a manutenção (verdadeira)
	

6) Por que é recomendado lançar exceções em vez de retornar códigos de erro em métodos?

	a) Porque lançar exceções permite que o compilador otimize melhor o desempenho do código.
	b) Porque retornar códigos de erro torna o código mais limpo e fácil de entender.
	c) Porque exceções misturam a lógica de negócios com o tratamento de erros, tornando o código 	mais direto.
	d) Porque lançar exceções separa o tratamento de erros da lógica principal, tornando o código 	mais limpo e fácil de manter.(verdadeiro)

7) Qual das alternativas a seguir está de acordo com boas práticas no tratamento de erros?

	a) Usar blocos try/catch vazios para evitar que exceções interrompam o fluxo do programa.
	b) Criar exceções genéricas para reduzir a complexidade do código.
	c) Centralizar o tratamento de erros e evitar repetir código de tratamento sempre que possível. 	(verdadeiro) 
	d) Tratar cada exceção diretamente no local onde ela ocorre, mesmo que o tratamento seja igual 	em diversos pontos.

8) Qual é um dos principais problemas de deixar o código fortemente acoplado a bibliotecas externas?

	a) Melhora a performance, já que bibliotecas externas são sempre otimizadas.	
	b) Aumenta o risco de falhas e dificulta a manutenção, pois o código fica preso a implementações 	externas. (verdadeira)
	c) Reduz o risco de falhas, pois bibliotecas externas tratam todos os erros internamente.
	d) Facilita a manutenção, pois todas as mudanças são controladas pela biblioteca.

9) Qual das alternativas a seguir representa uma prática recomendada ao lidar com limites de sistemas e bibliotecas externas?

	a) Integrar diretamente com bibliotecas externas sem testes, para acelerar o desenvolvimento.
	b) Evitar abstrações para manter o código o mais simples e direto possível.
	c) Criar uma camada de abstração e documentar o comportamento esperado da integração. 	(verdadeira)
	d) Confiar que a biblioteca externa sempre funcionará como esperado, sem necessidade de 	validação.

10) Qual é uma das principais vantagens de usar interfaces próprias ao integrar bibliotecas externas?

	d) Evita a necessidade de escrever testes automatizados para o código de integração.
	b) Permite alterar diretamente a biblioteca externa sem afetar o restante do código.
	a) Cria um escudo contra mudanças externas e facilita a realização de testes. (verdadeira)
	c) Elimina completamente a dependência de bibliotecas externas no projeto.

